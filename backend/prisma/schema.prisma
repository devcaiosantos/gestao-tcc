// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administrador {
  id                Int                @id @default(autoincrement())
  nome              String
  email             String             @unique
  senha             String
  emailSistema      String?
  chaveEmailSistema String?
  googleCredentials GoogleCredentials? @relation("AdminGoogleCredentials")
  dataCriacao       DateTime           @default(now())
  dataAtualizacao   DateTime           @updatedAt

  @@map("administrador")
}

model GoogleCredentials {
  id                      Int           @id @default(autoincrement())
  type                    String
  projectId               String
  privateKeyId            String
  privateKey              String
  clientEmail            String
  clientId                String
  authUri                 String
  tokenUri                String
  authProviderX509CertUrl String
  clientX509CertUrl       String
  universeDomain          String
  administradorId         Int           @unique
  administrador           Administrador @relation("AdminGoogleCredentials", fields: [administradorId], references: [id], onDelete: Cascade)

  @@map("google_credentials")
}

enum Departamento {
  DACOM
  DAAMB
  DACOC
  DAELN
  DAAEQ
  DAQUI
  DABIC
  DAFIS
  DAGEE
  DAHUM
  DAMAT
  OUTRO
}

model Professor {
  id              Int          @id @default(autoincrement())
  nome            String
  email           String       @unique
  departamento    Departamento
  ativo           Boolean      @default(true)
  dataCriacao     DateTime     @default(now())
  dataAtualizacao DateTime     @updatedAt

  alunosOrientados   AlunoMatriculado[] @relation("Orientador")
  alunosCoorientados AlunoMatriculado[] @relation("Coorientador")
  membroEmBancas     BancaMembro[]      @relation("ProfessorMembroBanca") // Relacionamento nomeado

  @@map("professor")
}

enum TipoTexto {
  ATA
  EMAIL
  DECLARACAO
}

model ModeloTexto {
  id              Int       @id @default(autoincrement())
  titulo          String    @unique
  conteudo        String
  tipo            TipoTexto
  dataCriacao     DateTime  @default(now())
  dataAtualizacao DateTime  @updatedAt

  @@map("modelo_texto")
}

model Semestre {
  id              Int      @id @default(autoincrement())
  ano             Int
  numero          Int
  ativo           Boolean  @default(false)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  alunosMatriculados AlunoMatriculado[]

  @@unique([ano, numero])
  @@map("semestre")
}

model Aluno {
  ra              String   @id
  nome            String
  email           String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  alunosMatriculados AlunoMatriculado[]
  HistoricoAluno     HistoricoAluno[]

  @@map("aluno")
}

enum Etapa {
  TCC1
  TCC2
}

enum Status {
  desmatriculado
  matriculado
  orientador_definido
  banca_preenchida
  banca_agendada
  aprovado
  reprovado
  nao_finalizado
}

model AlunoMatriculado {
  id              Int      @id @default(autoincrement())
  raAluno         String
  etapa           Etapa
  status          Status
  idSemestre      Int
  idOrientador    Int? // Chave estrangeira referenciando Professor
  idCoorientador  Int? // Chave estrangeira referenciando Professor (opcional)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  Aluno        Aluno      @relation(fields: [raAluno], references: [ra], onDelete: Cascade)
  Semestre     Semestre   @relation(fields: [idSemestre], references: [id])
  Orientador   Professor? @relation("Orientador", fields: [idOrientador], references: [id])
  Coorientador Professor? @relation("Coorientador", fields: [idCoorientador], references: [id])
  Banca        Banca?     @relation("AlunoBanca") // Relação nomeada

  // Garante que a combinação de raAluno, etapa e idSemestre seja única
  @@unique([raAluno, etapa, idSemestre])
  @@map("aluno_matriculado")
}

model HistoricoAluno {
  id          Int      @id @default(autoincrement())
  raAluno     String
  idSemestre  Int
  status      Status
  etapa       Etapa
  observacao  String?
  dataCriacao DateTime @default(now())

  Aluno Aluno @relation(fields: [raAluno], references: [ra], onDelete: Cascade)

<<<<<<< HEAD
  @@map("historico_aluno")
=======
  @@map("historico-aluno")
>>>>>>> development
}

model Banca {
  id                 Int       @id @default(autoincrement())
  dataHorario        DateTime? @default(now())
  local              String?
  nota               Float?
  dataCriacao        DateTime  @default(now())
  dataAtualizacao    DateTime  @updatedAt
  idAlunoMatriculado Int       @unique

  aluno   AlunoMatriculado @relation("AlunoBanca", fields: [idAlunoMatriculado], references: [id], onDelete: Cascade)
  membros BancaMembro[]    @relation("BancaMembros")

  @@map("banca")
}

model BancaMembro {
  id           Int     @id @default(autoincrement())
  bancaId      Int
  professorId  Int
  isPresidente Boolean 
  dataCriacao        DateTime  @default(now())
  dataAtualizacao    DateTime  @updatedAt

  banca     Banca     @relation("BancaMembros", fields: [bancaId], references: [id])
  professor Professor @relation("ProfessorMembroBanca", fields: [professorId], references: [id])

  @@unique([bancaId, professorId]) // Evita duplicidade do mesmo professor na mesma banca
  @@map("banca_membro")
}
